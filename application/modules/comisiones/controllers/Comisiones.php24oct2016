<?php
/**
 * Comisiones
 *
  *
 * @package    PensaApp
 * @subpackage Controller
 * @category   Controllers
 * @author     Pensanomica Team
 * @link       http://www.pensanomca.com
 * @copyright  01/12/2015
 */
use Illuminate\Database\Capsule\Manager as Capsule;
use Carbon\Carbon;
use Flexio\Modulo\Comisiones\Repository\ComisionesRepository as comisionesRep;

class Comisiones extends CRM_Controller
{
    private $comisionesRep;
    private $id_usuario;
	function __construct()
    {
        parent::__construct();

        $this->load->model('comisiones_orm');
        $this->load->model('comision_acumulados_orm');
        $this->load->model('comision_deducciones_orm');
        $this->load->model('comision_colaborador_orm');
        $this->load->model('estado_comision_orm');
         $this->load->model('configuracion_rrhh/Departamentos_orm');
        $this->load->model('colaboradores/estado_orm');
        $this->load->model('centros/centros_orm');
        $this->load->model('colaboradores/colaboradores_orm');
        $this->load->model('usuarios/usuario_orm');
        $this->load->model('usuarios/empresa_orm');
        $this->load->model('contabilidad/tipo_cuentas_orm');
        //Obtener el id_empresa de session
        $uuid_empresa = $this->session->userdata('uuid_empresa');
        $empresa = Empresa_orm::findByUuid($uuid_empresa);
        $this->id_usuario = $this->session->userdata('id_usuario');
        $this->empresa_id = $empresa->id;
        //Cargar Clase Util de Base de Datos
        $this->load->dbutil();
        $this->comisionesRep = new comisionesRep();
    }
    public function listar()
    {
    	$data = array();

     	//Verificar permisos de acceso a esta vista
    	if(!$this->auth->has_permission('acceso', 'comisiones/listar')){
    		//Redireccionar
     		$mensaje = array('estado'=>500, 'mensaje'=>'<b>Â¡Error!</b> Usted no cuenta con permiso');
    		$this->session->set_flashdata('mensaje', $mensaje);
    	}


    	$uuid_empresa = $this->session->userdata('uuid_empresa');
    	$empresa = Empresa_orm::findByUuid($uuid_empresa);


    	$cat_centros = Capsule::select(Capsule::raw("SELECT id, nombre
					FROM cen_centros WHERE empresa_id = :empresa_id1 AND estado='Activo' AND id NOT IN (SELECT padre_id FROM cen_centros WHERE empresa_id = :empresa_id2 AND estado='Activo')
					 ORDER BY id ASC"),
    			 array(
    				'empresa_id1' => $this->empresa_id,
    				'empresa_id2' => $this->empresa_id
    	));
    	$data = array(
    			"centros" => $cat_centros,
    			"estados" => Estado_comision_orm::where('identificador','=','estado' )->get()
     	);


       	$this->assets->agregar_css(array(
     			'public/assets/css/default/ui/base/jquery-ui.css',
    			'public/assets/css/default/ui/base/jquery-ui.theme.css',
    			'public/assets/css/plugins/jquery/jqgrid/ui.jqgrid.bootstrap.css',
    			'public/assets/css/plugins/jquery/jqgrid/ui.jqgrid.css',
     			'public/assets/css/plugins/bootstrap/bootstrap-datetimepicker.css',
    			'public/assets/css/plugins/bootstrap/daterangepicker-bs3.css',
    			'public/assets/css/plugins/jquery/chosen/chosen.min.css',
    	));
    	$this->assets->agregar_js(array(
    			'public/assets/js/default/jquery-ui.min.js',
    			'public/assets/js/plugins/jquery/jquery.sticky.js',
    			'public/assets/js/plugins/jquery/jQuery.resizeEnd.js',
    			'public/assets/js/plugins/jquery/jqgrid/i18n/grid.locale-es.js',
    			'public/assets/js/plugins/jquery/jqgrid/jquery.jqGrid.min.js',
    			'public/assets/js/plugins/jquery/chosen.jquery.min.js',
    			'public/assets/js/moment-with-locales-290.js',
    			'public/assets/js/plugins/bootstrap/daterangepicker.js',
    			'public/assets/js/plugins/jquery/chosen.jquery.min.js',
    			'public/assets/js/default/toast.controller.js'
     	));


    	if(!is_null($this->session->flashdata('mensaje'))){
    		$mensaje = json_encode($this->session->flashdata('mensaje'));
    	}else{
    		$mensaje = '';
    	}
    	$this->assets->agregar_var_js(array(
    			"toast_mensaje" => $mensaje
    	));



     	$breadcrumb = array(
    			"titulo" => '<i class="fa fa-institution"></i> Pagos extraordinarios',
     			"filtro" => false,
    			"menu" => array(
					"nombre" => $this->auth->has_permission('acceso', 'comisiones/crear')?"Crear":'',
					"url"	 => $this->auth->has_permission('acceso', 'comisiones/crear')?"comisiones/crear":'',
					"opciones" => array()
				)
    	);

      	if ($this->auth->has_permission('listar__exportarComision', 'comisiones/listar')){
     		        	$breadcrumb["menu"]["opciones"]["#ExportarBtnComision"] = "Exportar";
     	}

    	$this->template->agregar_titulo_header('Listado de pagos extraordinarios');
    	$this->template->agregar_breadcrumb($breadcrumb);
    	$this->template->agregar_contenido($data);
    	$this->template->visualizar($breadcrumb);
    }
    function crear($comision_uuid=NULL)
    {

    	if(!$this->auth->has_permission('acceso', 'comisiones/crear')){
    		redirect(base_url('/'));
    	}

    	$data = array();
    	$mensaje = array();

    	if(!empty($_POST["campo"])){
    		$this->guardar_comision();
    	}

    	$this->assets->agregar_css(array(
    			'public/assets/css/default/ui/base/jquery-ui.css',
    			'public/assets/css/default/ui/base/jquery-ui.theme.css',
    			'public/assets/css/plugins/jquery/jqgrid/ui.jqgrid.bootstrap.css',
    			'public/assets/css/plugins/jquery/jqgrid/ui.jqgrid.css',
    			'public/assets/css/plugins/bootstrap/bootstrap-datetimepicker.css',
    			'public/assets/css/plugins/bootstrap/daterangepicker-bs3.css',
    			'public/assets/css/plugins/jquery/chosen/chosen.min.css',
    			'public/assets/css/plugins/jquery/multiselect-master/style.css',
    	));
    	$this->assets->agregar_js(array(
    			'public/assets/js/default/jquery-ui.min.js',
    			'public/assets/js/plugins/jquery/jquery.sticky.js',
    			'public/assets/js/plugins/jquery/jQuery.resizeEnd.js',
    			'public/assets/js/plugins/jquery/jqgrid/i18n/grid.locale-es.js',
    			'public/assets/js/plugins/jquery/jquery-validation/jquery.validate.min.js',
    			'public/assets/js/plugins/jquery/jquery-validation/localization/messages_es.min.js',
    			'public/assets/js/plugins/jquery/jquery-validation/additional-methods.js',
    			'public/assets/js/plugins/jquery/jqgrid/jquery.jqGrid.min.js',
    			'public/assets/js/plugins/jquery/chosen.jquery.min.js',
    			'public/assets/js/plugins/jquery/jquery-inputmask/inputmask.js',
    			'public/assets/js/plugins/jquery/jquery-inputmask/jquery.inputmask.js',
    			'public/assets/js/moment-with-locales-290.js',
    			'public/assets/js/plugins/jquery/multiselect-master/multiselect.js',
    			'public/assets/js/default/formulario.js'
    	));
    	$breadcrumb = array(
    			"titulo" => '<i class="fa fa-institution"></i>  Pagos extraordinarios',
    	);
    	$this->template->agregar_titulo_header('Comisiones');
    	$this->template->agregar_breadcrumb($breadcrumb);
    	$this->template->agregar_contenido($data);
    	$this->template->visualizar();
    }

    function editar($comision_uuid=NULL)
    {
    	if(!$this->auth->has_permission('acceso', 'comisiones/ver/(:any)')){
    		redirect(base_url('/'));
    	}

    	$data = $mensaje = array();

    	$comision_info = array();
    	if($comision_uuid!=NULL){

    		$permiso_editar =  $this->auth->has_permission('ver__editarComision', 'comisiones/ver/(:any)')?1:0;

    		$comision_info = Comisiones_orm::with(array( 'empresa', 'centro_contable', 'estado','deducciones','acumulados','area_negocio' => function($query){
    		}))->where(Capsule::raw("HEX(uuid_comision)"), "=", $comision_uuid)->get()->toArray();

    		$comision_info[0]['uuid_cuenta_activo'] = strtoupper (bin2hex($comision_info[0]['uuid_cuenta_activo']));

    		$centro_contable 	=  !empty($comision_info[0]['centro_contable']['nombre'])?$comision_info[0]['centro_contable']['nombre']:'';
    		$area_negocio		=  !empty($comision_info[0]['area_negocio']['nombre'])?'/'.$comision_info[0]['area_negocio']['nombre']:'';

    		$columna_centro = $centro_contable.$area_negocio;

            $comision = $this->comisionesRep->findByUuid($comision_uuid);

          $comision->load('comentario_timeline', 'comisiones_asignados');
    		$this->assets->agregar_var_js(array(
    				"comision_id" => $comision_info[0]['id'],
    				"acumulados_id" => !empty($comision_info[0]['acumulados']) ? json_encode($comision_info[0]['acumulados']):"",
    				"deduccion_id" => !empty($comision_info[0]['deducciones'])? json_encode($comision_info[0]['deducciones']):"",
    				"permiso_editar" => $permiso_editar,
    				"columna_centro" => $columna_centro,
                    "vista"          => 'ver',
                    "coment" =>(isset($comision->comentario_timeline)) ? $comision->comentario_timeline : "",
    		));


    		//Colaboradores con que estan creados la comision
    		$result = Capsule::table('com_colaboradores as cc')
    		->where('cc.comision_id', $comision_info[0]['id'])
    		->distinct()
    		->get(array('cc.colaborador_id'));
    		$colaboradores_activos = (!empty($result) ? array_map(function($result){ return array( $result->colaborador_id); }, $result) : array());

    		$colaboradores_noactivados = Capsule::table('col_colaboradores as c')
    		->where('c.centro_contable_id',  $comision_info[0]['centro_contable_id'])
    		->where('c.empresa_id',  $this->empresa_id)
    		->whereNotIn('c.id', $colaboradores_activos)
    		->distinct()
    		->get(array('c.id','c.codigo','c.nombre','c.apellido','c.cedula'));
    		if($comision_info[0]['area_negocio_id'] > 0){

    			$colaboradores_noactivados = Capsule::table('col_colaboradores as c')
    			->where('c.centro_contable_id',  $comision_info[0]['centro_contable_id'])
    			->where('c.empresa_id',  $this->empresa_id)
    			->where('c.departamento_id',  $comision_info[0]['area_negocio_id'])
    			->whereNotIn('c.id', $colaboradores_activos)
    			->distinct()
    			->get(array('c.id','c.codigo','c.nombre','c.apellido','c.cedula'));
    		}
    		$data["colaboradores_noactivados"] = $colaboradores_noactivados;


    	}
    	$this->assets->agregar_css(array(
    			'public/assets/css/default/ui/base/jquery-ui.css',
    			'public/assets/css/default/ui/base/jquery-ui.theme.css',
    			'public/assets/css/plugins/jquery/jqgrid/ui.jqgrid.bootstrap.css',
    			'public/assets/css/plugins/jquery/jqgrid/ui.jqgrid.css',
    			'public/assets/css/plugins/bootstrap/bootstrap-datetimepicker.css',
    			'public/assets/css/plugins/bootstrap/daterangepicker-bs3.css',
    			'public/assets/css/plugins/jquery/chosen/chosen.min.css',
    			'public/assets/css/plugins/jquery/multiselect-master/style.css',

    	));
    	$this->assets->agregar_js(array(
    			'public/assets/js/default/jquery-ui.min.js',
    			'public/assets/js/plugins/jquery/jquery.sticky.js',
    			'public/assets/js/plugins/jquery/jQuery.resizeEnd.js',
    			'public/assets/js/plugins/jquery/jqgrid/i18n/grid.locale-es.js',
    			'public/assets/js/plugins/jquery/jquery-validation/jquery.validate.min.js',
    			'public/assets/js/plugins/jquery/jquery-validation/localization/messages_es.min.js',
    			'public/assets/js/plugins/jquery/jquery-validation/additional-methods.js',
    			'public/assets/js/plugins/jquery/combodate/combodate.js',
    			'public/assets/js/plugins/jquery/combodate/momentjs.js',
    			'public/assets/js/plugins/jquery/jqgrid/jquery.jqGrid.min.js',
    			'public/assets/js/plugins/jquery/chosen.jquery.min.js',
    			'public/assets/js/plugins/jquery/jquery-inputmask/inputmask.js',
    			'public/assets/js/plugins/jquery/jquery-inputmask/jquery.inputmask.js',
    			'public/assets/js/moment-with-locales-290.js',
    			'public/assets/js/plugins/bootstrap/daterangepicker.js',
    			'public/assets/js/plugins/bootstrap/bootstrap-datetimepicker.js',
    			'public/assets/js/default/tabla-dinamica.jquery.js',
    			'public/assets/js/default/formulario.js',
    			'public/assets/js/plugins/jquery/multiselect-master/multiselect.js',
    	));

    	$data["info"] = $comision_info[0];

    	$data["permiso_editar"] = $permiso_editar;


    	$breadcrumb = array(
    			"titulo" => '<i class="fa fa-institution"></i> Pagos extraordinarios: '.$data["info"]["numero"],
    			"filtro" => false,
    			"menu" => array(
    					"url"	 => '#',
    					"nombre" => "Acci&oacute;n"
    			)
    	);
    	if ($this->auth->has_permission('ver__agregarComision', 'comisiones/ver/(:any)')){
    		$breadcrumb["menu"]["opciones"]["#agregarColaborador"] = "Agregar colaborador";
    	}

    	if ($this->auth->has_permission('ver__eliminarComision', 'comisiones/ver/(:any)')){
    		$breadcrumb["menu"]["opciones"]["#EliminarBtnComisionColaborador"] = "Eliminar";
    	}


    	$this->template->agregar_titulo_header('Colaboradores');
    	$this->template->agregar_breadcrumb($breadcrumb);
    	$this->template->agregar_contenido($data);
    	$this->template->visualizar();
    }

    public function ajax_listar_comisiones()
    {
       	//Just Allow ajax request
    	if(!$this->input->is_ajax_request()){
    		return false;
    	}
    	$uuid_empresa = $this->session->userdata('uuid_empresa');
    	$empresa = Empresa_orm::findByUuid($uuid_empresa);

    	$clause = array();
     	$centro_contable	= $this->input->post('centro_contable', true);
       	$estado 			= $this->input->post('estado_id', true);
       	$fecha1 				= $this->input->post('fecha1', true);
       	$fecha2 				= $this->input->post('fecha2', true);

    	$clause["empresa_id"] = $empresa->id;

     	if( !empty($centro_contable)){
    		$clause["centro_contable_id"] = $centro_contable;
    	}

      	if( !empty($estado)){
    		$clause["estado_id"] = $estado;
    	}
    	if( !empty($fecha1) && !empty($fecha2)){
    		$fecha_inicio = explode("/", $fecha1);
    		$fecha_final  = explode("/", $fecha2);

    		$inicio = $fecha_inicio[2].'-'.$fecha_inicio[1].'-'.$fecha_inicio[0];
    		$fin = $fecha_final[2].'-'.$fecha_final[1].'-'.$fecha_final[0];

    		$clause["fecha_pago"] = array('>=', $inicio);
    		$clause["fecha_pago@"] = array('<=', $fin);
    	}
       	list($page, $limit, $sidx, $sord) = Jqgrid::inicializar();

     	$count = Comisiones_orm::listar($clause, NULL, NULL, NULL, NULL)->count();
     	list($total_pages, $page, $start) = Jqgrid::paginacion($count, $limit, $page);

     	$rows = Comisiones_orm::listar($clause, $sidx, $sord, $limit, $start);
    	//dd($rows->toArray());
    	//Constructing a JSON
    	$response = new stdClass();
    	$response->page     = $page;
    	$response->total    = $total_pages;
    	$response->records  = $count;
    	$i=0;

    	if(!empty($rows->toArray())){
    		foreach ($rows->toArray() AS $i => $row){
    			$centro_contable 	=  !empty($row['centro_contable']['nombre'])?$row['centro_contable']['nombre']:'';
      			$area_negocio		=  !empty($row['area_negocio']['nombre'])?'/'.$row['area_negocio']['nombre']:'';

      			$columna_centro = $centro_contable.$area_negocio;

     			if($row['estado']['valor']  == 'pagada'){
    				$estado = '<span class="label" style="background-color: #5cb85c; color:#FFFFFF;">'.$row['estado']['etiqueta'].'</span>';
    			}else if ($row['estado']['valor']  == 'pendiente'){
    				$estado = '<span class="label"  style="background-color: #f0ad4e;color:#FFFFFF;">'.$row['estado']['etiqueta'].'</span>';
    			}
    			else if ( $row['estado']['valor'] == 'anulada'){
    				$estado = '<span  class="label" style="background-color: #000000; color:#FFFFFF;">'.$row['estado']['etiqueta'].'</span>';
    			}
    			else {
    				$estado = '<span class="label label-warning">'.$row['estado']['etiqueta'].'</span>';
    			}

     		 	$valores_sumados =  array_sum(array_column($row['colaboradores'], 'monto_total'));

      			$uuid_comision = $row['uuid_comision'];
    			$cantidad_colaboradores = count($row['colaboradores']);
      			$hidden_options = "";
    			$link_option = '<button class="viewOptions btn btn-success btn-sm" type="button" data-id="'. $row['id'] .'"><i class="fa fa-cog"></i> <span class="hidden-xs hidden-sm hidden-md">Opciones</span></button>';

    			if ($this->auth->has_permission('acceso', 'comisiones/ver/(:any)')){
     				$hidden_options .= '<a href="'. base_url('comisiones/ver/'. $uuid_comision) .'" class="btn btn-block btn-outline btn-success">Ver Detalle</a>';
     				$link_detalles = '<a  style="color:blue; text-decoration: underline;" href="'. base_url('comisiones/ver/'. $uuid_comision) .'">'.$row['numero'].'</a>';
    			}
    			else{
    				$link_detalles =  $row['numero'];
    			}

    			if($row['estado']['etiqueta'] != 'Anulada'){
    				if ($this->auth->has_permission('listar__anularComision', 'comisiones/listar')){
    					$hidden_options .= '<a href="#" id="confirmAnular"   data-id="' . $row ['id'] . '" class="btn btn-block btn-outline btn-success" type="button">Anular Comision</a>';
    				}
    			}
    			$fecha_pago = ($row['fecha_pago'] == '0000-00-00')?'Pendiente':date("d/m/Y", strtotime($row['fecha_pago']));
    			$response->rows[$i]["id"] = $row['id'];
    			$response->rows[$i]["cell"] = array(
    				$link_detalles,
     				$columna_centro,
    				$row['descripcion'],
     				$fecha_pago,
     				$cantidad_colaboradores,
      				'$'.number_format($valores_sumados,2),
    				$estado,
	   				$link_option,
    				$hidden_options
    			);
    			$i++;
    		}
    	}

     	echo json_encode($response);
    	exit;
    }


     public function ajax_listar_colaboradores_detalle()
    {
     	$clause =  $estado = array();
      	$clause["estado"] 			= 1;
      	$comision_id 				= $this->input->post('comision_id', true);
      	$columna_centro 				= $this->input->post('columna_centro', true);
      	$clause["comision_id"] 		= $comision_id;

    	list($page, $limit, $sidx, $sord) = Jqgrid::inicializar();

    	$count = Comision_colaborador_orm::listar($clause, NULL, NULL, NULL, NULL)->count();

    	list($total_pages, $page, $start) = Jqgrid::paginacion($count, $limit, $page);

     	$rows = Comision_colaborador_orm::listar($clause, $sidx, $sord, $limit, $start);

     	$response = new stdClass();
    	$response->page     = $page;
    	$response->total    = $total_pages;
    	$response->records  = $count;
    	$i=0;
    	$estado = Comision_colaborador_orm::estado_comision($comision_id);

    	$etiqueta = (!empty($estado[0]->etiqueta))?$estado[0]->etiqueta:'';

     	if(!empty($rows->toArray())){
    		foreach ($rows->toArray() AS $i => $row){
 	    			$nombre = Util::verificar_valor($row['colaborador']['nombre']);
	    			$apellido = Util::verificar_valor($row['colaborador']['apellido']);
  	    			$response->rows[$i]["id"] = $row['id'];
	    			$response->rows[$i]["cell"] = array(
	    					$row['id'],
	    					$nombre.' '.$apellido,
	    					$row['colaborador']['cedula'],
	    					isset($columna_centro)?$columna_centro:'',
	    					isset($row['descripcion'])?$row['descripcion']:'',
   	    					Util::verificar_valor($row['monto_total'])
	    		 );
	    			$i++;
     		}
    	}
     	echo json_encode($response);
    	exit;
    }






     function ajax_anular_comision() {

    	//Just Allow ajax request
    	if(!$this->input->is_ajax_request()){
    		return false;
    	}

    	$clause = array();
    	$id = $this->input->post('id_comision', true);

    	if(empty($id)){
    		return false;
    	}

    	/**
    	 * Inicializar Transaccion
    	 */
    	Capsule::beginTransaction();

    	try {
     		$response = Comisiones_orm::where('id', '=', $id);
    		$response->update(array("estado_id" => 16));

    	} catch(ValidationException $e){

     		Capsule::rollback();

    		echo json_encode(array(
    				"response" => false,
    				"mensaje" => "Hubo un error tratando de anular la comisi&oacute;n."
    		));
    		exit;
    	}

     	Capsule::commit();

    	echo json_encode(array(
    			"response" => $response,
    			"mensaje" => "Se ha anulado la comisi&oacute;n satisfactoriamente."
    	));
    	exit;
    }

    function ajax_eliminar_colaborador() {

    	//Just Allow ajax request
    	if(!$this->input->is_ajax_request()){
    		return false;
    	}

    	$clause = array();
    	$id = $this->input->post('colaboradoresComision', true);

    	if(empty($id)){
    		return false;
    	}

    	/**
    	 * Inicializar Transaccion
    	 */
    	Capsule::beginTransaction();

    	try {
     		$response = Comision_colaborador_orm::whereIn('id',  $id)->delete();
     	} catch(ValidationException $e){

    		Capsule::rollback();

    		echo json_encode(array(
    				"response" => false,
    				"mensaje" => "Hubo un error tratando de eliminar el colaborador."
    		));
    		exit;
    	}

    	Capsule::commit();

    	echo json_encode(array(
    			"response" => $response,
    			"mensaje" => "Se ha eliminado el colaborador satisfactoriamente."
    	));
    	exit;
    }

    function ajax_editar_monto(){

     	//Just Allow ajax request
    	if(!$this->input->is_ajax_request()){
    		return false;
    	}

    	$clause = array();
    	$monto = $this->input->post('Monto', true);
    	$detalle = $this->input->post('Detalle', true);
    	$id = $this->input->post('id', true);

    	if(empty($id)){
    		return false;
    	}

    	/**
    	 * Inicializar Transaccion
    	 */
    	Capsule::beginTransaction();

    	try {
     		$response = Comision_colaborador_orm::where('id','=',  $id);
    		$response->update(array("monto_total" => $monto, 'descripcion'=>$detalle));
    		$response = true;

    	} catch(ValidationException $e){

    		Capsule::rollback();

     		$response = false;
    		exit;
    	}

    	Capsule::commit();
    	echo $response;

    	exit;

    }

    public function ajax_editar_comision() {
    	// Just Allow ajax request
    	if (! $this->input->is_ajax_request ()) {
    		return false;
    	}

    	/**
    	 * Inicializar Transaccion
    	 */
    	Capsule::beginTransaction();

    	try {

     		$comision_id			= $this->input->post('comision_id', true);
    		$uuid_cuenta_activo		= $this->input->post('campo[uuid_cuenta_activo]', true);
     		$metodo_pago			= $this->input->post('campo[metodo_pago]', true);
     		$estado_id				= $this->input->post('campo[estado_id]', true);
     		$descripcion			= $this->input->post('campo[descripcion]', true);

     		$deducciones 			 = $this->input->post('deducciones', true);
    		$acumulados 			 = $this->input->post('acumulados', true);


    		//$comision = Comisiones_orm::where('id', '=', $comision_id);
            $comision = $this->comisionesRep->find($comision_id);
            $comision->uuid_cuenta_activo = hex2bin($uuid_cuenta_activo);
            $comision->metodo_pago = $metodo_pago;
            $comision->estado_id = $estado_id;
            $comision->descripcion = $descripcion;
            $comision->save();
    		/*$comision->update(
    				array(
    						"uuid_cuenta_activo" 	=>hex2bin($uuid_cuenta_activo),
    						"metodo_pago" 	=>$metodo_pago,
    						"estado_id" 	=>$estado_id,
    						"descripcion" => $descripcion
    				)
    		);*/

    		if(!empty($deducciones['deducciones'])){


    			$responseDed = Comision_deducciones_orm::where('comision_id', $comision_id)->delete();

    			//--------- Parte de Deducciones
    			$fieldset = array();
    			if(!empty($deducciones['deducciones']))
    			{
    				if(Util::is_array_empty($deducciones['deducciones']) == false){
    					$j=0;
    					foreach ($deducciones['deducciones'] AS $deduccion){
    						$fieldset = array();
    						$fieldset["fecha_creacion"] = date('Y-m-d H:i:s');
    						$fieldset["deduccion_id"] 	= $deduccion;
    						$fieldset["comision_id"] 	= $comision_id;

    						Comision_deducciones_orm::create($fieldset);
    						$j++;
    					}
    				}
    			}
    		}

    		if(!empty($acumulados['acumulados'])){
    			$responseAc = Comision_acumulados_orm::where('comision_id', $comision_id)->delete();
    			// -------- Parte de Acumualados
     			if(!empty($acumulados['acumulados']))
    			{
    				if(Util::is_array_empty($acumulados['acumulados']) == false){
    					//Recorrer los dependientes
    					$j=0;
    					foreach ($acumulados['acumulados'] AS $acumulado){

     						$fieldset = array();
    						$fieldset["fecha_creacion"] = date('Y-m-d H:i:s');
    						$fieldset["acumulado_id"] 	= $acumulado;
    						$fieldset["comision_id"] 	= $comision_id;

    						Comision_acumulados_orm::create($fieldset);
     						$j++;
    					}
    				}
    			}
      		}
    	} catch(ValidationException $e){

    		// Rollback
    		Capsule::rollback();
    		$mensaje = array('estado'=>500, 'mensaje'=>'<b>Hubo un error tratando de actualizar la comisiï¿½n.</b> ');
    		echo json_encode(array(
    				"response" => false,
    				//"mensaje" => "Hubo un error tratando de actualizar la comisiï¿½n."
    		));
    		exit;
    	}

    	Capsule::commit();

    	$mensaje = array('estado'=>200, 'mensaje'=>'<b>Se ha actualizado satisfactoriamente.</b> ');
    	$this->session->set_flashdata('mensaje', $mensaje);

 		echo json_encode(array(
    			"response" 	=> true,
      			//"mensaje" 	=> "Se ha actualizado satisfactoriamente."
    	));
    	 exit;


    }

    function ajax_agregar_colaborador()
    {
       	Capsule::beginTransaction();

    	try {

     		/**
    		 * Guardar Estudios
    		 */
    		$nombres = array();

    		/**
    		 * Verificar si existe datos en arreglo
    		*/
    		if(!empty($_POST["colaboradores"]))
    		{
     			$comision = Comisiones_orm::find($_POST["comision_id"]);

     			if(Util::is_array_empty($_POST["colaboradores"]) == false){
    				$j=0;
    				foreach ($_POST["colaboradores"]  AS $colaborador){

     					$fieldset["comision_id"] = $_POST["comision_id"];
     					$fieldset["colaborador_id"] = $colaborador;
     					$fieldset["estado"] = 1;
    					$nombres[] = new Comision_colaborador_orm($fieldset);
    					$j++;
    				}
    			}
     			/**
    			 * Guardar relacion de colaborador > estudios
    			 */
    			$comision->colaboradores()->saveMany($nombres);
    		}

    		Capsule::commit();

    	} catch(ValidationException $e){

    		Capsule::rollback();
    		echo json_encode(array(
    				"response" => false,
    				"mensaje" => "Hubo un error tratando de agregar colaboradores."
    		));
    		exit;
    	}
    	echo json_encode(array(
    			"response" => true,
    			"mensaje" => "Se ha agregado satisfactoriamente."
    	));
    	exit;
    }

    private function  guardar_comision()
    {
       	unset($_POST["campo"]["guardarFormBtn"]);

    	/**
    	 * Inicializar Transaccion
    	*/
    	Capsule::beginTransaction();

    	try {

     			//$_fecha_aplicar = str_replace('/', '-', $_POST["campo"]["fecha_aplicar"]);
    			$uuid_empresa = $this->session->userdata('uuid_empresa');
    			$empresa = Empresa_orm::findByUuid($uuid_empresa);

     			$fieldset = Util::set_fieldset("campo");

				$fieldset["uuid_comision"]  = Capsule::raw("ORDER_UUID(uuid())");
				$fieldset["fecha_creacion"] = date('Y-m-d H:i:s');
				$fieldset["estado_id"] = 20;
				$fieldset["uuid_cuenta_activo"] 	=   hex2bin($_POST['campo']['uuid_cuenta_activo']);
				$fieldset["numero"] 	=  $this->ajax_cargar_codigo_numero();;
				$fieldset["empresa_id"] = $empresa->id;
				$fieldset["centro_contable_id"] = $_POST['campo']['centro_contable_id'];
				$fieldset["area_negocio_id"] = !empty($_POST['campo']['area_negocio_id'])?$_POST['campo']['area_negocio_id']:'NULL';
    			$comision = Comisiones_orm::create($fieldset);
               // $comision = $this->comisionesRep->create($fieldset);

    			$deducciones = array();

    			if(!empty($_POST["deducciones"]))
    			{
    				if(Util::is_array_empty($_POST["deducciones"]) == false){
    					//Recorrer los dependientes
    					$j=0;
    					foreach ($_POST["deducciones"]["deducciones"] AS $deduccion){

    						$fieldset["fecha_creacion"] = date('Y-m-d H:i:s');
    						$fieldset["deduccion_id"] = $deduccion;
    						$deducciones[] = new Comision_deducciones_orm($fieldset);
    						$j++;
    					}
    				}
     				$comision->deducciones()->saveMany($deducciones);
    			}

    			$acumulados = array();

    			if(!empty($_POST["acumulados"]))
    			{
    				if(Util::is_array_empty($_POST["acumulados"]) == false){
    					//Recorrer los dependientes
    					$j=0;
    					foreach ($_POST["acumulados"]["acumulados"] AS $acumulado){
    						$fieldset["fecha_creacion"] = date('Y-m-d H:i:s');
    						$fieldset["acumulado_id"] = $acumulado;
    						$acumulados[] = new Comision_acumulados_orm($fieldset);
    						$j++;
    					}
    				}
     				$comision->acumulados()->saveMany($acumulados);
    			}

    			$nombres = array();
     			if(!empty($_POST["colaboradores_to"]))
    			{

    				if(Util::is_array_empty($_POST["colaboradores_to"]) == false){
    					$j=0;
    					foreach ($_POST["colaboradores_to"]AS $colaborador){
     						$fieldset["colaborador_id"] = $colaborador;
    						$nombres[] = new Comision_colaborador_orm($fieldset);
    						$j++;
    					}
    				}
     				$comision->colaboradores()->saveMany($nombres);
    			}



    			$comision_creada =  Comisiones_orm::where('id','=',$comision->id)->get()->toArray();
     			$uuid_comision = $comision_creada[0]['uuid_comision'];


    	} catch(ValidationException $e){

    		// Rollback
    		Capsule::rollback();

    		log_message("error", "MODULO: ". __METHOD__ .", Linea: ". __LINE__ ." --> ". $e->getMessage()."\r\n");

    		echo json_encode(array(
    				"guardado" => false,
    				"mensaje" => "Hubo un error tratando de crear la comisiï¿½n"
    		));
    		exit;
    	}



     	Capsule::commit();
    	//die;
    	//Redireccionar
    	redirect(base_url('comisiones/ver/'.$uuid_comision));
    }

    public function ajax_cargar_codigo()
    {

    	if(!$this->input->is_ajax_request()){
    		return false;
    	}

    	$codigo = $this->ajax_cargar_codigo_numero();
     	$json = json_encode($codigo);
    	echo $json;
    	exit;
    }

    public function ajax_cargar_codigo_numero(){
    	$uuid_empresa = $this->session->userdata('uuid_empresa');
    	$empresa = Empresa_orm::findByUuid($uuid_empresa);
    	$codigo = 0;
    	$response = new stdClass();
    	$response = Comisiones_orm::where("empresa_id", "=",$empresa->id)
    	->orderBy('id', 'DESC')
    	->limit(1)
    	->get();

     	if(!empty($response->toArray())){
      		$codigo = $response[0]['numero'];
    	}
    	else
    		$codigo = 'PE0';

     	$codigo= str_replace("PE","", $codigo);

     	$codigo = (int) $codigo + 1;

     	$codigo = Util::zerofill($codigo,4);

    	$codigo = 'PE'.$codigo;

    	return $codigo;
    }


    public function ajax_listar_departamento_x_centro()
    {

    	if(!$this->input->is_ajax_request()){
    		return false;
    	}

    	$clause = array();
    	$centro_id = $this->input->post('centro_id', true);
    	//$empresa_id = !empty($_POST["empresa_id"]) ? $this->input->post('empresa_id', true) : $this->empresa_id;
    	$uuid_empresa = $this->session->userdata('uuid_empresa');
    	$empresa = Empresa_orm::findByUuid($uuid_empresa);


    	if(empty($centro_id)){
    		return false;
    	}

    	$response = new stdClass();
    	$response->result = Departamentos_orm::departamento_centro($centro_id, $empresa->id);
    	$json = json_encode($response);
    	echo $json;
    	exit;

    }
    //Se usa en la lista del formulario
    public function ajax_listar_colaboradores()
    {
    	//Just Allow ajax request
    	if(!$this->input->is_ajax_request()){
    		return false;
    	}
    	$uuid_empresa = $this->session->userdata('uuid_empresa');
    	$empresa = Empresa_orm::findByUuid($uuid_empresa);

    	$centro_contable_id 	= $this->input->post('centro_contable_id', true);
    	$departamento_id 	= $this->input->post('departamento_id', true);
    	$response = new stdClass();

    	if( (int) $departamento_id > 0 ){
    		$response->result = Colaboradores_orm::where("centro_contable_id", "=", $centro_contable_id)
    			->where('empresa_id', $empresa->id)
    			->where('departamento_id', $departamento_id)
    			//->select('id', 'no_colaborador','nombre','apellido', 'cedula')->get()->toArray();
                         ->select('id', 'codigo','nombre','apellido', 'cedula')->get()->toArray();
    	}else{
    		$response->result = Colaboradores_orm::where("centro_contable_id", "=", $centro_contable_id)
    		->where('empresa_id', $empresa->id)
    		//->select('id', 'no_colaborador','nombre','apellido', 'cedula')->get()->toArray();
                   ->select('id', 'codigo','nombre','apellido', 'cedula')->get()->toArray();
    	}

       	echo json_encode($response);
    	exit;

    }

    public function ocultotablacomisiones()
    {
    	$this->assets->agregar_js(array(
    			'public/assets/js/modules/comisiones/tabla-comisiones.js'
    	));
    	$this->load->view('tabla-comisiones');
    }


    public function ocultotablacolaboradores()
    {
    	$this->assets->agregar_js(array(
    			'public/assets/js/modules/comisiones/tabla-colaborador.js'
    	));
    	$this->load->view('tabla-colaboradores');
    }

    public function ocultoformulario($data=NULL)
    {

    	if(!empty($data)){
    		/*$this->assets->agregar_js(array(
    				'public/assets/js/modules/comisiones/editar.js'
    		));*/
    	}else{
    		$this->assets->agregar_js(array(
    				'public/assets/js/modules/comisiones/crear.js'
    		));
    	}

    	$this->load->view('formulario', $data);
    }

    function ocultoformulariocomentarios() {

        $data = array();

        $this->assets->agregar_js(array(
            'public/assets/js/plugins/ckeditor/ckeditor.js',
            'public/assets/js/plugins/ckeditor/adapters/jquery.js',
            'public/assets/js/modules/comisiones/vue.comentario.js',
            'public/assets/js/modules/comisiones/formulario_comentario.js'
        ));

        $this->load->view('formulario_comentarios');
        $this->load->view('comentarios');

    }

    function ajax_guardar_comentario() {

        if(!$this->input->is_ajax_request()){
            return false;
        }
        $model_id   = $this->input->post('modelId');
        $comentario = $this->input->post('comentario');
        $comentario = ['comentario'=>$comentario,'usuario_id'=>$this->id_usuario];
        $comisiones = $this->comisionesRep->agregarComentario($model_id, $comentario);
        $comisiones->load('comentario_timeline');

        $this->output->set_status_header(200)->set_content_type('application/json', 'utf-8')
            ->set_output(json_encode($comisiones->comentario_timeline->toArray()))->_display();
        exit;
    }

}
