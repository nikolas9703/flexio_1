<?php
if (!defined('BASEPATH')) exit('No direct script access allowed');
use Illuminate\Database\Capsule\Manager as Capsule;
use League\Csv\Writer as Writer;

class Aseguradoras extends CRM_Controller
{

    private $id_empresa;
    private $id_usuario;
    private $empresaObj;


    function __construct() {

        parent::__construct();

        $this->load->helper(array('file', 'string', 'util'));
        $this->load->model('aseguradoras_orm');
        $this->load->model('Contabilidad/tipo_cuentas_orm');
        $this->load->model('Contabilidad/Cuentas_orm');
        $this->load->model('Ramos_orm');
        $this->load->model('contactos/Contacto_orm');
        $this->load->model('Planes_orm');
        $this->load->model('Coberturas_orm');
        $this->load->model('usuarios/usuario_orm');
        $this->load->model('usuarios/organizacion_orm');
        $this->load->model('usuarios/organizacion_orm');
        $this->load->model('Catalogo_tipo_poliza_orm');
        $this->load->model('Catalogo_tipo_intereses_orm');

        $this->load->dbutil();
        $uuid_empresa = $this->session->userdata('uuid_empresa');
        $empresaObj = new Buscar(new Empresa_orm, 'uuid_empresa');
        $this->empresaObj = $empresaObj->findByUuid($uuid_empresa);
        $this->id_usuario = $this->session->userdata("huuid_usuario");
        $this->id_empresa = $this->empresaObj->id;
    }

    public function listar() {

        $data = array();
        $clause = array('empresa_id' => $this->id_empresa);
        $rows = Aseguradoras_orm::where($clause)->get();
        $camposGrid = array();
        if (!empty($rows->toArray())) {
            foreach ($rows->toArray() AS $i => $row) {
                $hidden_options = "";

                $link_option = '<button class="viewOptions btn btn-success btn-sm" type="button" data-aseguradora="' . $row['uuid_aseguradora'] . '"><i class="fa fa-cog"></i> <span class="hidden-xs hidden-sm hidden-md">Opciones</span></button>';


                $hidden_options .= '<a href="#" id="cambiarEtapaConfirmBtn" data-aseguradora="' . $row['uuid_aseguradora'] . '" class="btn btn-block btn-outline btn-success">Ver Aseguradora</a>';

                $hidden_options .= '<a href="#" id="cambiarEtapaConfirmBtn" data-aseguradora="' . $row['uuid_aseguradora'] . '" class="btn btn-block btn-outline btn-success">Agregar un nuevo contacto</a>';

                $hidden_options .= '<a href="#" id="cambiarEtapaConfirmBtn" data-aseguradora="' . $row['uuid_aseguradora'] . '" class="btn btn-block btn-outline btn-success">Crear Reporte de Remesas</a>';

                $hidden_options .= '<a href="#" id="cambiarEtapaConfirmBtn" data-aseguradora="' . $row['uuid_aseguradora'] . '" class="btn btn-block btn-outline btn-success">Crear Reporte de Comisión</a>';

                $nombre_aseguradora = !empty($row["nombre"]) ? $row["nombre"] : "";


                $camposGrid[$i]["info"][0]["name"] = "Teléfono";
                $camposGrid[$i]["info"][0]["value"] = !empty($row["telefono"]) ? $row["telefono"] : "";

                $camposGrid[$i]["info"][1]["name"] = "Dirección ";
                $camposGrid[$i]["info"][1]["value"] = !empty($row["direccion"]) ? $row["direccion"] : "";

                $camposGrid[$i]["info"][2]["name"] = "E-mail ";
                $camposGrid[$i]["info"][2]["value"] = !empty($row["email"]) ? $row["email"] : "";


                $camposGrid[$i]["id"] = $row["id"];
                $camposGrid[$i]["opcion"] = $hidden_options;


                $camposGrid[$i]["uuid"] = isset($row["uuid_aseguradora"]) ? $row["uuid_aseguradora"] : NULL;
                $camposGrid[$i]["titulo"]["name"] = "Nombre";
                $camposGrid[$i]["titulo"]["value"] = $nombre_aseguradora;
                $camposGrid[$i]["subtitulo"]["name"] = "RUC ";
                $camposGrid[$i]["subtitulo"]["value"] = !empty($row["ruc"]) ? $row["ruc"] : "";

                $camposGrid[$i]["info"][0]["name"] = "Teléfono";
                $camposGrid[$i]["info"][0]["value"] = !empty($row["telefono"]) ? $row["telefono"] : "";

                $camposGrid[$i]["info"][1]["name"] = "Dirección ";
                $camposGrid[$i]["info"][1]["value"] = !empty($row["direccion"]) ? $row["direccion"] : "";

                $camposGrid[$i]["info"][2]["name"] = "E-mail ";
                $camposGrid[$i]["info"][2]["value"] = !empty($row["email"]) ? $row["email"] : "";


                $camposGrid[$i]["id"] = $row["id"];
                $camposGrid[$i]["opcion"] = $hidden_options;


            }
        }
        $data["grid"] = $camposGrid;


        $this->assets->agregar_css(array(
            'public/assets/css/plugins/jquery/jqgrid/ui.jqgrid.bootstrap.css',
            'public/assets/css/plugins/jquery/jqgrid/ui.jqgrid.css',
            'public/assets/css/default/ui/base/jquery-ui.css',
            'public/assets/css/default/ui/base/jquery-ui.theme.css',
            'public/assets/css/modules/stylesheets/aseguradoras.css',
            'public/assets/css/plugins/bootstrap/bootstrap-tagsinput.css',
            'public/assets/css/plugins/jquery/toastr.min.css',
        ));
        $this->assets->agregar_js(array(
            'public/assets/js/default/jquery-ui.min.js',
            'public/assets/js/plugins/jquery/jquery.sticky.js',
            'public/assets/js/plugins/jquery/jQuery.resizeEnd.js',
            'public/assets/js/plugins/jquery/jqgrid/i18n/grid.locale-es.js',
            'public/assets/js/plugins/jquery/jqgrid/jquery.jqGrid.min.js',
            'public/assets/js/plugins/jquery/jqgrid/plugins/jQuery.jqGrid.columnToggle.js',
            'public/assets/js/plugins/jquery/switchery.min.js',
            'public/assets/js/plugins/jquery/jquery-validation/jquery.validate.min.js',
            'public/assets/js/plugins/jquery/jquery-validation/localization/messages_es.min.js',
            'public/assets/js/plugins/jquery/jquery-validation/additional-methods.js',
            'public/assets/js/plugins/jquery/jquery-inputmask/inputmask.js',
            'public/assets/js/plugins/jquery/jquery-inputmask/jquery.inputmask.js',
            'public/assets/js/plugins/jquery/sweetalert/sweetalert.min.js',
            'public/assets/js/plugins/jquery/combodate/combodate.js',
            'public/assets/js/plugins/jquery/combodate/momentjs.js',
            'public/assets/js/moment-with-locales-290.js',
            'public/assets/js/plugins/bootstrap/daterangepicker.js',
            'public/assets/js/default/tabla-dinamica.jquery.js',
            'public/assets/js/default/formulario.js',
            'public/assets/js/modules/aseguradoras/listar_aseguradoras.js',
            //'public/assets/js/default/grid.js',
            'public/assets/js/default/toast.controller.js',
        ));
        //------------------------------------------
        // Para mensaje de creacion satisfactoria
        //------------------------------------------
        //  $mensaje = !empty($this->session->flashdata('mensaje')) ? json_encode(array('estado' => 200, 'mensaje' => $this->session->flashdata('mensaje'))) : '';
        $mensaje = !empty($this->session->flashdata('mensaje')) ? json_encode($this->session->flashdata('mensaje')) : '';
        //dd($mensaje);
        $this->assets->agregar_var_js(array(
            "toast_mensaje" => $mensaje
        ));
        /* dd($this->session->set_flashdata('mensaje'));
         if (!is_null($this->session->flashdata('mensaje'))) {
             $mensaje = json_encode($this->session->flashdata('mensaje'));
         } else {
             $mensaje = '';
         }
         $this->assets->agregar_var_js(array(
             "toast_mensaje" => $mensaje
         ));*/
        //Breadcrum Array
       
        $breadcrumb = array(
            "titulo" => '<i class="fa fa-book"></i> Aseguradoras',
            "filtro" => true,
            "menu" => array(
                "nombre" => "Crear",
                "url" => "aseguradoras/crear",
            ),
            "ruta" => array(
                0 => array("nombre" => "Seguros", "url" => "#",  "activo" => false),
                1 => array("nombre" => '<b>Aseguradoras</b>', "activo" => true)
            ),
            "filtro"    => false,
        );
        $menuOpciones["#exportarAseguradoraLnk"] = "Exportar";
        $breadcrumb["menu"]["opciones"] = $menuOpciones;
        $breadcrumb["botones"]["Aseguradoras"] = '<i class="fa fa-tasks"></i> Pipeline';
        $breadcrumb["botones"]["Aseguradoras"] = '<i class="fa fa-star"></i> Score';

        $this->template->agregar_titulo_header('Listado de Aseguradoras');
        $this->template->agregar_breadcrumb($breadcrumb);
        $this->template->agregar_contenido($data);


        $this->template->visualizar($breadcrumb);
    }

    public function crear() {
        $data = array();
        $mensaje = array();

        if (!empty($_POST["campo"])) {
            $this->guardar_aseguradora();
        }

        $this->assets->agregar_css(array(
            'public/assets/css/plugins/bootstrap/bootstrap-datetimepicker.css',
            'public/assets/css/plugins/bootstrap/daterangepicker-bs3.css',
            'public/assets/css/plugins/jquery/toastr.min.css',
            'public/assets/css/default/ui/base/jquery-ui.css',
            'public/assets/css/default/ui/base/jquery-ui.theme.css',
            'public/assets/css/plugins/jquery/jqgrid/ui.jqgrid.bootstrap.css',
            'public/assets/css/plugins/jquery/jqgrid/ui.jqgrid.css',
        ));
        $this->assets->agregar_js(array(
            'public/assets/js/default/jquery-ui.min.js',
            'public/assets/js/plugins/jquery/jquery.sticky.js',
            'public/assets/js/plugins/jquery/jQuery.resizeEnd.js',
            'public/assets/js/plugins/jquery/jqgrid/i18n/grid.locale-es.js',
            'public/assets/js/plugins/jquery/jqgrid/jquery.jqGrid.min.js',
            'public/assets/js/plugins/jquery/jqgrid/plugins/jQuery.jqGrid.columnToggle.js',
            'public/assets/js/plugins/jquery/switchery.min.js',
            'public/assets/js/plugins/jquery/jquery-validation/jquery.validate.min.js',
            'public/assets/js/plugins/jquery/jquery-validation/localization/messages_es.min.js',
            'public/assets/js/plugins/jquery/jquery-validation/additional-methods.js',
            'public/assets/js/plugins/jquery/jquery-inputmask/inputmask.js',
            'public/assets/js/plugins/jquery/jquery-inputmask/jquery.inputmask.js',
            'public/assets/js/plugins/jquery/sweetalert/sweetalert.min.js',
            'public/assets/js/plugins/jquery/combodate/combodate.js',
            'public/assets/js/plugins/jquery/combodate/momentjs.js',
            'public/assets/js/moment-with-locales-290.js',
            'public/assets/js/plugins/bootstrap/daterangepicker.js',
            'public/assets/js/default/tabla-dinamica.jquery.js',
            'public/assets/js/default/toast.controller.js',
            'public/assets/js/default/formulario.js',
            'public/assets/js/modules/aseguradoras/crear.js'
        ));

        $breadcrumb = array(
            "titulo" => '<i class="fa fa-book"></i> Crear Aseguradora',            
            "ruta" => array(
                0 => array("nombre" => "Seguros", "url" => "#",  "activo" => false),
                1 => array("nombre" => "Aseguradoras", "url" => "aseguradoras/listar",  "activo" => false),
                2 => array("nombre" => '<b>Crear</b>', "activo" => true)
            ),
            "filtro"    => false,
            "menu"      => array()            
        );
        
        $this->template->agregar_titulo_header('Aseguradoras');
        $this->template->agregar_breadcrumb($breadcrumb);
        $this->template->agregar_contenido($data);
        $this->template->visualizar();
    }

    public function ocultoformulario($data = array()) {
        $this->assets->agregar_js(array(
            'public/assets/js/modules/aseguradores/crear.js'
        ));

        $this->load->view('formulario', $data);
    }

    function ajax_listar() {


        $uuid_usuario = $this->session->userdata('huuid_usuario');
        $usuario = Usuario_orm::findByUuid($uuid_usuario);
        $usuario_org = $usuario->organizacion;

        $orgid = $usuario_org->map(function ($org) {
            return $org->id;
        });

        $clause = array(
            "nombre" => $this->input->post("nombre"),
            "ruc" => $this->input->post("ruc"),
            "telefono" => $this->input->post("telefono"),
            "email" => $this->input->post("email"),
        );


        list($page, $limit, $sidx, $sord) = Jqgrid::inicializar();
        $count = Aseguradoras_orm::listar($clause, NULL, NULL, NULL, NULL)->count();
        list($total_pages, $page, $start) = Jqgrid::paginacion($count, $limit, $page);
        $rows = Aseguradoras_orm::listar($clause, $sidx, $sord, $limit, $start);


        //Constructing a JSON
        $response = new stdClass();
        $response->page = $page;
        $response->total = $total_pages;
        $response->records = $count;
        $i = 0;
       
        if (!empty($rows->toArray())) {
            foreach ($rows->toArray() AS $i => $row) {
                $hidden_options = "<a href=" . base_url('aseguradoras/editar/' . $row['uuid_aseguradora'].'/ver_aseguradora') . " class='btn btn-block btn-outline btn-success'>Ver Aseguradora</a>";

                $hidden_options .= "<a href=" . base_url('aseguradoras/editar/' . $row['uuid_aseguradora'].'/nuevo_contacto') . " id='cambiarEtapaConfirmBtn' class='btn btn-block btn-outline btn-success'>Agregar un nuevo contacto</a>";

                $hidden_options .= '<a href="' . base_url('aseguradoras/reporte-remesas/' . $row['uuid_aseguradora'] ). '" id="cambiarEtapaConfirmBtn"  class="btn btn-block btn-outline btn-success">Crear Reporte de Remesas</a>';

                $hidden_options .= '<a href="#" id="cambiarEtapaConfirmBtn" class="btn btn-block btn-outline btn-success">Crear Reporte de Comisión</a>';
                $link_option = '<button class="viewOptions btn btn-success btn-sm" type="button" data-id="' . $row['id'] . '"><i class="fa fa-cog"></i> <span class="hidden-xs hidden-sm hidden-md">Opciones</span></button>';
                $response->rows[$i]["id"] = $row['id'];
                $response->rows[$i]["cell"] = array(
                    $row['id'],
                    "<a href='" . base_url('aseguradoras/editar/' . $row['uuid_aseguradora']) . "'>" . $row['nombre'] . "</a>",
                    $row['ruc'],
                    $row['telefono'],
                    $row['email'],
                    $row['direccion'],
                    $link_option,
                    $hidden_options
                );
            }
        }

        echo json_encode($response);
        exit;


    }

    function guardar_aseguradora() {
        unset($_POST["campo"]["guardarFormBtn"]);
        $data = [];

        $this->assets->agregar_css(array(
            'public/assets/css/plugins/bootstrap/bootstrap-datetimepicker.css',
            'public/assets/css/plugins/bootstrap/daterangepicker-bs3.css',
            'public/assets/css/plugins/jquery/toastr.min.css',
            'public/assets/css/default/ui/base/jquery-ui.css',
            'public/assets/css/default/ui/base/jquery-ui.theme.css',
            'public/assets/css/plugins/jquery/jqgrid/ui.jqgrid.bootstrap.css',
            'public/assets/css/plugins/jquery/jqgrid/ui.jqgrid.css',
        ));
        $this->assets->agregar_js(array(
            'public/assets/js/default/jquery-ui.min.js',
            'public/assets/js/plugins/jquery/jquery.sticky.js',
            'public/assets/js/plugins/jquery/jQuery.resizeEnd.js',
            'public/assets/js/plugins/jquery/jqgrid/i18n/grid.locale-es.js',
            'public/assets/js/plugins/jquery/jqgrid/jquery.jqGrid.min.js',
            'public/assets/js/plugins/jquery/jqgrid/plugins/jQuery.jqGrid.columnToggle.js',
            'public/assets/js/plugins/jquery/switchery.min.js',
            'public/assets/js/plugins/jquery/jquery-validation/jquery.validate.min.js',
            'public/assets/js/plugins/jquery/jquery-validation/localization/messages_es.min.js',
            'public/assets/js/plugins/jquery/jquery-validation/additional-methods.js',
            'public/assets/js/plugins/jquery/jquery-inputmask/inputmask.js',
            'public/assets/js/plugins/jquery/jquery-inputmask/jquery.inputmask.js',
            'public/assets/js/plugins/jquery/sweetalert/sweetalert.min.js',
            'public/assets/js/plugins/jquery/combodate/combodate.js',
            'public/assets/js/plugins/jquery/combodate/momentjs.js',
            'public/assets/js/moment-with-locales-290.js',
            'public/assets/js/plugins/bootstrap/daterangepicker.js',
            'public/assets/js/default/tabla-dinamica.jquery.js',
            'public/assets/js/default/toast.controller.js',
            'public/assets/js/default/formulario.js',
        ));
        /**
         * Inicializar Transaccion
         */
        

        try {
            $response = array();
            $fieldset = Util::set_fieldset("campo");
            $var_ruc = $fieldset['tomo'] . '-' . $fieldset['folio_imagen_documento'] . '-' . $fieldset['asiento_ficha'] . '-' . $fieldset['digito_verificador'];
            $fieldset['ruc'] = $var_ruc;
            $fieldset["created_at"] = date('Y-m-d H:i:s');
            $fieldset['empresa_id'] = $this->id_empresa;

            /**
             * Guardar Aseguradora
             */
            $validar = Aseguradoras_orm::where('ruc', '=', $var_ruc)->get()->toArray();
           
                if (empty($validar)) {
                    $aseguradora = Aseguradoras_orm::create($fieldset);
                    if(!empty($aseguradora)){
                        $mensaje = array('estado' => 200, 'mensaje' => '<b>¡&Eacute;xito!</b> Se ha guardado correctamente la aseguradora.');
                    }else{
                        $mensaje = array('estado' => 500, 'mensaje' => '<b>¡Error!</b> Su solicitud no fue procesada. ');
                    }
                    
                } else {
                    $mensaje = array('estado' => 500, 'mensaje' => '<b>¡Error!</b> Su solicitud no fue procesada, el n&uacute;mero de R.U.C ya existe. ');
                }

        } catch (ValidationException $e) {
            
        }

        // If we reach here, then
        // data is valid and working.
        // Commit the queries!
       
        $this->session->set_flashdata('mensaje', $mensaje);
        redirect(base_url('aseguradoras/listar'));
    }

    function editar($uuid = NULL, $opcion = NULL) {
        if (!$uuid) {
            echo "Error.";
            exit;
        }

        $data = array();
        $mensaje = array();

        $aseguradora = new Aseguradoras_orm();
        $aseguradora = $aseguradora
            ->where("uuid_aseguradora", "=", hex2bin(strtolower($uuid)))
            ->first();
        $this->assets->agregar_css(array(
            'public/assets/css/default/ui/base/jquery-ui.css',
            'public/assets/css/default/ui/base/jquery-ui.theme.css',
            'public/assets/css/plugins/jquery/jqgrid/ui.jqgrid.bootstrap.css',
            'public/assets/css/plugins/jquery/jqgrid/ui.jqgrid.css',
            'public/assets/css/plugins/jquery/switchery.min.css',
            'public/assets/css/plugins/jquery/chosen/chosen.min.css',
            'public/assets/css/plugins/bootstrap/bootstrap-tagsinput.css',
            'public/assets/css/plugins/bootstrap/bootstrap-datetimepicker.css',
            'public/assets/css/plugins/bootstrap/daterangepicker-bs3.css',
            'public/assets/css/plugins/jquery/fileinput/fileinput.css',
            'public/assets/css/modules/stylesheets/aseguradoras.css',
        ));

        $this->assets->agregar_js(array(
            'public/assets/js/plugins/jquery/jquery-inputmask/inputmask.js',
            'public/assets/js/plugins/jquery/jquery-inputmask/jquery.inputmask.js',
            'public/assets/js/plugins/jquery/jquery-validation/jquery.validate.min.js',
            'public/assets/js/plugins/jquery/jquery-validation/localization/messages_es.min.js',
            'public/assets/js/plugins/jquery/combodate/combodate.js',
            'public/assets/js/plugins/jquery/combodate/momentjs.js',
            'public/assets/js/plugins/jquery/chosen.jquery.min.js',
            'public/assets/js/default/tabla-dinamica.jquery.js',
            'public/assets/js/plugins/bootstrap/daterangepicker.js',
            'public/assets/js/default/formulario.js',
            'public/assets/js/plugins/jquery/jqgrid/i18n/grid.locale-es.js',
            'public/assets/js/plugins/jquery/jqgrid/jquery.jqGrid.min.js',
            'public/assets/js/plugins/jquery/jQuery.resizeEnd.js',
            'public/assets/js/modules/aseguradoras/acciones_editar.js',
            'public/assets/js/modules/aseguradoras/provider.js',
            'public/assets/js/default/toast.controller.js',
            'public/assets/js/modules/aseguradoras/editar.js',
            'public/assets/js/modules/contactos/routes.js'
        ));

        if (!empty($_POST)) {
            $response = false;
            $response = Capsule::transaction(
                function () {
                    $aseguradora = new Aseguradoras_orm;
                    $aseguradora = $aseguradora
                        ->where("uuid_aseguradora", "=", hex2bin(strtolower($this->uri->segment(3, 0))))
                        ->first();

                    $campo = $this->input->post("campo");
                    //DATOS GENERALES DE LA ASEGURADORA
                    $aseguradora->nombre = $campo["nombre"];
                    $var_ruc = $campo['tomo'] . '-' . $campo['folio_imagen_documento'] . '-' . $campo['asiento_ficha'] . '-' . $campo['digito_verificador'];
                    $aseguradora->ruc = $var_ruc;
                    $aseguradora->telefono = $campo["telefono"];
                    $aseguradora->email = $campo["email"];
                    $aseguradora->direccion = $campo["direccion"];
                    //$aseguradora->direccion = hex2bin($campo["uuid_cuenta_pagar"]);
                    // $aseguradora->direccion = hex2bin($campo["uuid_cuenta_cobrar"]);
                    // $aseguradora->uuid_cuenta_pagar = hex2bin($campo["uuid_cuenta_pagar"]);
                    //$aseguradora->uuid_cuenta_cobrar = hex2bin($campo["uuid_cuenta_cobrar"]);
                    $aseguradora->save();

                    return true;
                }
            );


            if ($response) {
                $data["mensaje"]["clase"] = "alert-success";
                $data["mensaje"]["contenido"] = "Hubo un error al tratar de editar la aseguradora.";
                $this->session->set_userdata('updatedAseguradora', $aseguradora->id);
                $mensaje = array('estado' => 200, 'mensaje' => '<b>¡&Eacute;xito!</b> Se ha editado correctamente la aseguradora.');
                $this->session->set_flashdata('mensaje', $mensaje);
                redirect(base_url('aseguradoras/listar'));
            } else {
                //Establecer el mensaje a mostrar
                $data["mensaje"]["clase"] = "alert-danger";
                $data["mensaje"]["contenido"] = "Hubo un error al tratar de editar la aseguradora.";

                $mensaje = array('estado' => 500, 'mensaje' => '<b>¡Error!</b> Su solicitud no fue procesada, error al tratar de editar la aseguradora.');
                $this->session->set_flashdata('mensaje', $mensaje);
            }
        }

        //Introducir mensaje de error al arreglo
        //para mostrarlo en caso de haber error
        // $data["message"] = $mensaje;
        $this->assets->agregar_var_js(array(
        "permiso_editar" => $this->auth->has_permission('ver__editarAseguradoras', 'aseguradoras/editar/(:any)') ? 'true' : 'false',
        ));
        // dd($aseguradora->ruc);


        $breadcrumb = array(
            "titulo" => '<i class="fa fa-book"></i> Aseguradora ' . $aseguradora->nombre,
            "filtro" => false, //sin vista grid
            "menu" => array(
                'url' => 'javascipt:',
                'nombre' => "Acción",
                "opciones" => array(
                    "#datosAseguradoraBtn" => "Datos de Aseguradora",
                    "#agregarContactoBtn" => "Nuevo Contacto",
                    "/configuracion_seguros/configuracion/planes-crear/".$aseguradora->uuid_aseguradora => 'Crear plan'
                )
            ),
            "ruta" => array(
                0 => array("nombre" => "Seguros", "url" => "#",  "activo" => false),
                1 => array("nombre" => "Aseguradoras", "url" => "aseguradoras/listar",  "activo" => false),
                2 => array("nombre" => $aseguradora->nombre, "activo" => true)
            )
        );
        
        $e_ruc = explode('-', $aseguradora->ruc);
        $data["opcion"] = $opcion;
        $data["campos"] = array(
            "campos" => array(
                "created_at" => $aseguradora->created_at,
                "uuid_aseguradora" => $aseguradora->uuid_aseguradora,
                "nombre" => $aseguradora->nombre,
                "tomo" => $e_ruc[0],
                "folio_imagen_documento" => !empty($e_ruc[1]) ? $e_ruc[1] : '',
                "asiento_ficha" => !empty($e_ruc[2]) ? $e_ruc[2] : '',
                "digito_verificador" => !empty($e_ruc[3]) ? $e_ruc[3] : '',
                "telefono" => $aseguradora->telefono,
                "email" => $aseguradora->email,
                "direccion" => $aseguradora->direccion,
                // "uuid_cuenta_pagar" => strtoupper(bin2hex($aseguradora->uuid_cuenta_pagar)),
                // "uuid_cuenta_cobrar" => strtoupper(bin2hex($aseguradora->uuid_cuenta_cobrar)),
                // "descuenta_comision" => $aseguradora->descuenta_comision,
                "imagen_archivo" => $aseguradora->imagen_archivo,
            ),

        );


        $this->template->agregar_titulo_header('Aseguradoras');
        $this->template->agregar_breadcrumb($breadcrumb);
        $this->template->agregar_contenido($data);
        $this->template->visualizar();
    }

    public function ajax_listar_ramos() {
        //Just Allow ajax request

        if (!$this->input->is_ajax_request()) {
            return false;
        }

        list($page, $limit, $sidx, $sord) = Jqgrid::inicializar();
        $tipo = $this->input->post('tipo');
        $nombre = (string)$this->input->post('nombre');
        $uuid_empresa = $this->session->userdata('uuid_empresa');
        $empresa = Empresa_orm::findByUuid($uuid_empresa);
        //fix count
        $count = Ramos_orm::where('empresa_id', $empresa->id)->count();

        list($total_pages, $page, $start) = Jqgrid::paginacion($count, $limit, $page);

        $clause = array('empresa_id' => $empresa->id);
        if (!empty($tipo)) $clause['tipo_cuenta_id'] = $tipo;
        //if(!empty($nombre)) $clause['nombre'] = array('like',"%$nombre%");

        $cuentas = Ramos_orm::listar($clause, $nombre, $sidx, $sord, $limit, $start);

        //Constructing a JSON
        $response = new stdClass();
        $response->page = $page;
        $response->total = $total_pages;
        $response->record = $count;
        $i = 0;

        if (!empty($cuentas)) {
            foreach ($cuentas as $row) {
                $tituloBoton = ($row['estado'] != 1) ? 'Habilitar' : 'Deshabilitar';
                $estado = ($row['estado'] == 1) ? 0 : 1;
                $hidden_options = "";
                $link_option = '<button class="viewOptions btn btn-success btn-sm" type="button" data-id="' . $row['id'] . '"><i class="fa fa-cog"></i> <span class="hidden-xs hidden-sm hidden-md">Opciones</span></button>';
                $hidden_options .= '<a href="javascript:" data-id="' . $row['id'] . '" class="btn btn-block btn-outline btn-success editarRamoBtn">Editar Ramo</a>';
                $hidden_options .= '<a href="javascript:" data-id="' . $row['id'] . '" data-estado="' . $estado . '" class="btn btn-block btn-outline btn-success cambiarEstadoRamoBtn">' . $tituloBoton . ' Ramo</a>';
                $level = substr_count($row['nombre'], ".");
                $spanStyle = ($row['estado'] == 1) ? '' : 'color:red;';
                $response->rows[$i] = array("id" => $row['id'], 'cell' => array(
                    'id' => $row['id'],
                    'nombre' => "<span style='".$spanStyle."'>".$row['nombre']."</span>",
                    'descripcion' => "<span style='".$spanStyle."'>".$row['descripcion']."</span>",
                    'estado' => "<span style='".$spanStyle."'>".(($row['estado'] == 1) ? 'Habilitado' : 'Deshabilitado')."</span>",
                    'opciones' => $link_option,
                    'link' => $hidden_options,
                    "level" => isset($row["level"]) ? $row["level"] : "0", //level
                    'parent' => $row["padre_id"] == 0 ? "NULL" : (string)$row["padre_id"], //parent
                    'isLeaf' => (Ramos_orm::is_parent($row['id']) == true) ? false : true, //isLeaf
                    'expanded' => false, //expended
                    'loaded' => true, //loaded
                ));
                $i++;
            }
        }

        echo json_encode($response);
        exit;
    }

    function ajax_cambiar_estado_ramo() {
        if (!$this->input->is_ajax_request()) {
            return false;
        }

        $response = array();
        $estado = $this->input->post('estado');
        $id = $this->input->post('id');


        $total = Ramos_orm::cambiar_estado($id, $estado);

        if ($total > 0) {
            $response = array('estado' => 200, 'mensaje' => '<b>¡&Eacute;xito!</b> La actualizaci&oacute;n de estado');
        } else {
            $response = array('estado' => 500, 'mensaje' => '<b>¡Error!</b> Su solicitud no fue Procesada');
        }
        echo json_encode($response);
        exit;
    }

    function ajax_buscar_ramo() {
        if (!$this->input->is_ajax_request()) {
            return false;
        }
        $id = $this->input->post('id');
        $cuenta = Ramos_orm::find($id);
        $response = array();


        $response['id'] = $cuenta->id;
        $response['codigo'] = $cuenta->id;
        $response['nombre'] = $cuenta->nombre;
        $response['descripcion'] = $cuenta->descripcion;
        $response['padre_id'] = $cuenta->padre_id;
        $response['codigo_ramo'] = $cuenta->codigo_ramo;
        $response['interes_asegurado'] = $cuenta->id_tipo_int_asegurado;
        $response['tipo_poliza'] = $cuenta->id_tipo_poliza;

        echo json_encode($response);
        exit;

    }

    public function ajax_listar_ramos_tree() {
        if (!$this->input->is_ajax_request()) {
            return false;
        }

        $uuid_empresa = $this->session->userdata('uuid_empresa');
        $empresa = Empresa_orm::findByUuid($uuid_empresa);
        $tipo = $this->input->post('tipo');
        $clause = array('empresa_id' => $empresa->id);
        if (!empty($tipo)) $clause['tipo_cuenta_id'] = $tipo;
        $cuentas = Ramos_orm::listar_cuentas($clause); 
        //Constructing a JSON
        $response = new stdClass();
        $response->plugins = ["contextmenu"];
        $response->core->check_callback[0] = true;
        $spanStyle = ($row['estado'] == 1) ? '' : 'color:red;';
        if (!empty($cuentas)) {
            foreach ($cuentas as $row) {
                $spanStyle = ($row['estado'] == 1) ? '' : 'color:red;';
                $response->core->data[$i] = array(
                    'id' => (string)$row['id'],
                    'parent' => $row["padre_id"] == 0 ? "#" : (string)$row["padre_id"],
                    'text' => "<span style='".$spanStyle."'>".$row["nombre"]."</span>",
                    'icon' => 'fa fa-folder',
                    'codigo' => $row["id"]
                    //'state' =>array('opened' => true)
                );

                $i++;
            }

        }

        echo json_encode($response);
        exit;

    }

    function ajax_guardar_ramos() {
        if (!$this->input->is_ajax_request()) {
            return false;
        }
        
        
        $response = new stdClass();
        $uuid_empresa = $this->session->userdata('uuid_empresa');
        $empresa = Empresa_orm::findByUuid($uuid_empresa);
        $id = $this->input->post('id');
        $nombre = $this->input->post('nombre');
        $descripcion = $this->input->post('descripcion');
        $codigo_ramo = $this->input->post('codigo_ramo');
        $tipo_interes_ramo = $this->input->post('tipo_interes_ramo');
        $tipo_poliza_ramo = $this->input->post('tipo_poliza_ramo');
        $form_solicitud = $this->input->post('form_solicitud');
        $padre_id = $this->input->post('codigo');
        $cuenta_id = $this->input->post('cuenta_id');
        
        
        if (!isset($id)) {
            $existe = Ramos_orm::findCodigo(strtoupper($codigo_ramo));
            if($existe){
                $response->clase = "danger";
                $response->estado = 200;
                $response->mensaje = '<b>Error</b> Codigo ya existe.';
                echo json_encode($response);
                exit;
            }else{
                $datos = array();
                $datos['nombre'] = $nombre;
                $datos['descripcion'] = $descripcion;
                $datos['codigo_ramo'] = strtoupper($codigo_ramo);
                $datos['id_tipo_int_asegurado'] = $tipo_interes_ramo;
                $datos['id_tipo_poliza'] = $tipo_poliza_ramo;
                $datos['empresa_id'] = $empresa->id;
                $datos['padre_id'] = $padre_id;
                $impuesto_save = Ramos_orm::create($datos);
                $response->clase = "success";
                $response->estado = 200;
                $response->mensaje = '<b>¡&Eacute;xito!</b> Se ha guardado correctamente  ' . $impuesto_save->nombre;
            }
            
        } else {
            $impuesto_save = Ramos_orm::find($id);
            
            if($impuesto_save->codigo_ramo != strtoupper($codigo_ramo)){
                $existe = Ramos_orm::findCodigo(strtoupper($codigo_ramo));
                if($existe){
                    $response->clase = "danger";
                    $response->estado = 200;
                    $response->mensaje = '<b>Error</b> Codigo ya existe.';
                    echo json_encode($response);
                    exit;
                }
            }
            $impuesto_save->nombre = $nombre;
            $impuesto_save->descripcion = $descripcion;
            $impuesto_save->codigo_ramo = strtoupper($codigo_ramo);
            $impuesto_save->id_tipo_int_asegurado = $tipo_interes_ramo;
            $impuesto_save->id_tipo_poliza = $tipo_poliza_ramo;
            $impuesto_save->save();
            $response->clase = "success";
            $response->estado = 200;
            $response->mensaje = '<b>¡&Eacute;xito!</b> Se ha actualizado correctamente  ' . $impuesto_save->nombre;
        }

        echo json_encode($response);
        exit;
    }

    public function reporte_remesas($uuid_aseguradora = "") {

        $data = array();
        $this->assets->agregar_css(array(
            'public/assets/css/default/ui/base/jquery-ui.css',
            'public/assets/css/default/ui/base/jquery-ui.theme.css',
            'public/assets/css/plugins/jquery/jqgrid/ui.jqgrid.bootstrap.css',
            'public/assets/css/plugins/jquery/jqgrid/ui.jqgrid.css',
            'public/assets/css/plugins/bootstrap/bootstrap-datetimepicker.css',
            'public/assets/css/plugins/bootstrap/daterangepicker-bs3.css',
            'public/assets/css/plugins/jquery/chosen/chosen.min.css',
            'public/assets/js/plugins/jquery/sweetalert/sweetalert.css',
            'public/assets/css/modules/stylesheets/remesas.css',
        ));
        $this->assets->agregar_js(array(
            'public/assets/js/default/jquery-ui.min.js',
            'public/assets/js/plugins/jquery/jquery.sticky.js',
            'public/assets/js/plugins/jquery/jQuery.resizeEnd.js',
            'public/assets/js/plugins/jquery/jqgrid/i18n/grid.locale-es.js',
            'public/assets/js/plugins/jquery/jqgrid/jquery.jqGrid.min.js',
            'public/assets/js/moment-with-locales-290.js',
            'public/assets/js/plugins/jquery/jqgrid/plugins/jQuery.jqGrid.columnToggle.js',
            'public/assets/js/default/subir_documento_modulo.js',
            'public/assets/js/plugins/jquery/jquery-inputmask/inputmask.js',
            'public/assets/js/plugins/jquery/jquery-inputmask/jquery.inputmask.js',
            'public/assets/js/plugins/jquery/chosen.jquery.min.js',
            'public/assets/js/default/formulario.js',
            'public/assets/js/plugins/bootstrap/daterangepicker.js',
            'public/assets/js/plugins/bootstrap/bootstrap-datetimejs.js',
            'public/assets/js/default/lodash.min.js',
            'public/assets/js/plugins/jquery/sweetalert/sweetalert.min.js',
            'public/assets/js/modules/aseguradoras/remesas.js',
            'public/assets/js/default/toast.controller.js'
        ));
        //Objeto de la aseguradora
        $aseguradoraObj = new Buscar(new Aseguradoras_orm, 'uuid_aseguradora');
        $aseguradora = $aseguradoraObj->findByUuid($uuid_aseguradora);
        //Objeto del contacto de la aseguradora
        $contacto = Contacto_orm::where("principal", "=", 1)->where("id_aseguradora", "=", $aseguradora->id)->get()->toArray();

        $data['info'] = array("aseguradora" => array(
            "fecha" => $this->fecha_es("", date("Y-m-d")) . " " . date("Y"),
            "nombre" => $aseguradora->nombre,
            "contacto" => !empty($contacto[0]['nombre']) ? $contacto[0]['nombre'] : "",
            "telefono" => $aseguradora->telefono,
            "email" => $aseguradora->email,
            "direccion" => $aseguradora->direccion,
            "fecha_desde" => date("d-m-Y", strtotime("-1 month")),
            "fecha_hasta" => date("d-m-Y"),
        ));

        //Breadcrum Array
        $breadcrumb = array(
            "titulo" => '<i class="fa fa-book"></i> Aseguradoras',
            "filtro" => false,
        );

        $this->template->agregar_titulo_header('Reporte de remesas');
        $this->template->agregar_breadcrumb($breadcrumb);
        $this->template->agregar_contenido($data);


        $this->template->visualizar($breadcrumb);
    }

    private function fecha_es($fecha_full = "", $mes = "") {
        $meses = array("Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre");
        if (!empty($fecha) && empty($mes)) {
            return date('d', strtotime($fecha)) . " de " . $meses[date('n', strtotime($fecha)) - 1] . " de " . date('Y', strtotime($fecha));

        } else if (empty($fecha) && !empty($mes)) {
            return $meses[date('n', strtotime($mes)) - 1];
        }

    }

    public function exportar() {
        //  dd("Exportar");
        if (empty($_POST)) {
            exit;
        }

        $ids = $this->input->post('ids', true);
        $id = explode(",", $ids);
        // dd($id);
        if (empty($id)) {
            return false;
        }
        $csv = array();
        $clause = array(
            "id" => $id
        );
        $aseguradoras = Aseguradoras_orm::listar($clause, NULL, NULL, NULL, NULL)->toArray();

        if (empty($aseguradoras)) {
            return false;
        }
        $i = 0;
        foreach ($aseguradoras AS $row) {
            $csvdata[$i]['nombre'] = Util::verificar_valor($row['nombre']);
            $csvdata[$i]["ruc"] = utf8_decode(Util::verificar_valor($row['ruc']));
            $csvdata[$i]["telefono"] = utf8_decode(Util::verificar_valor($row['telefono']));
            $csvdata[$i]["email"] = utf8_decode(Util::verificar_valor($row["email"]));
            $csvdata[$i]["direccion"] = utf8_decode(Util::verificar_valor($row["direccion"]));
            $i++;
        }
        $csv = Writer::createFromFileObject(new SplTempFileObject());
        $csv->insertOne([
            'Nombre',
            'RUC',
            'Telefono',
            'E-mail',
            'Direccion'
        ]);
        $csv->insertAll($csvdata);
        $csv->output("aseguradoras-" . date('ymd') . ".csv");
        exit;
    }
}

?>
